import 'package:flutter/material.dart';
import 'package:intl/intl.dart'; // Import intl for date formatting
import 'package:url_launcher/url_launcher.dart'; // Import url_launcher for opening links

import '../models/rss_feed.dart';

class FeedCard extends StatefulWidget {
  final RssFeed feed;

  const FeedCard({super.key, required this.feed});

  @override
  _FeedCardState createState() => _FeedCardState();
}

class _FeedCardState extends State<FeedCard> {
  bool _isHovered = false; // State to track hover status

  @override
  Widget build(BuildContext context) {
    // Get theme data
    final isDarkTheme = Theme.of(context).brightness == Brightness.dark;

    return Center(
      child: Container(
        width: 875, // Set a fixed width for larger screens
        margin: const EdgeInsets.symmetric(horizontal: 16.0), // Add margins
        child: MouseRegion(
          onEnter: (_) => setState(() => _isHovered = true),
          onExit: (_) => setState(() => _isHovered = false),
          child: GestureDetector(
            onTap: () {
              _openArticleInBrowser(widget.feed.link);
            },
            child: Card(
              elevation: 0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16.0),
              ),
              child: Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(16.0),
                  boxShadow: [
                    BoxShadow(
                      color: isDarkTheme
                          ? Colors.black.withOpacity(0.4)
                          : Colors.grey.withOpacity(0.4),
                      spreadRadius: 2,
                      blurRadius: 10,
                      offset: const Offset(0, 4),
                    ),
                  ],
                  color: _isHovered
                      ? (isDarkTheme ? Colors.grey[700] : Colors.grey[300])
                      : (isDarkTheme
                          ? Colors.black54
                          : Colors.white), // Adjust color based on theme
                ),
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    final isWideScreen = constraints.maxWidth > 600;

                    return Column(
                      children: [
                        Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: widget.feed.mediaUrl.isNotEmpty
                              ? ClipRRect(
                                  borderRadius: BorderRadius.circular(16.0),
                                  child: SizedBox(
                                    width: double.infinity,
                                    height: isWideScreen ? 270 : 200,
                                    child: Image.network(
                                      widget.feed.mediaUrl,
                                      fit: BoxFit.cover,
                                      errorBuilder:
                                          (context, error, stackTrace) {
                                        return _buildPlaceholder(
                                            isWideScreen, isDarkTheme);
                                      },
                                      loadingBuilder:
                                          (context, child, loadingProgress) {
                                        if (loadingProgress == null) {
                                          return child;
                                        } else {
                                          return Center(
                                            child: CircularProgressIndicator(
                                              value: loadingProgress
                                                          .expectedTotalBytes !=
                                                      null
                                                  ? loadingProgress
                                                          .cumulativeBytesLoaded /
                                                      (loadingProgress
                                                              .expectedTotalBytes ??
                                                          1)
                                                  : null,
                                            ),
                                          );
                                        }
                                      },
                                    ),
                                  ),
                                )
                              : _buildPlaceholder(isWideScreen, isDarkTheme),
                        ),
                        Padding(
                          padding: const EdgeInsets.all(10.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                widget.feed.title,
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: isWideScreen ? 18.0 : 16.0,
                                  color:
                                      isDarkTheme ? Colors.white : Colors.black,
                                ),
                              ),
                              const SizedBox(height: 8.0),
                              Text(
                                widget.feed.description,
                                maxLines: 2,
                                overflow: TextOverflow.ellipsis,
                                style: TextStyle(
                                  color: isDarkTheme
                                      ? Colors.white70
                                      : Colors.black87,
                                ),
                              ),
                              const SizedBox(height: 4.0),
                              Text(
                                _formatDate(
                                    widget.feed.dateTime, widget.feed.pubDate),
                                style: TextStyle(
                                  fontSize: 12.0,
                                  color: isDarkTheme
                                      ? Colors.white54
                                      : Colors.grey,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    );
                  },
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildPlaceholder(bool isWideScreen, bool isDarkTheme) {
    return Container(
      width: double.infinity,
      height: isWideScreen ? 270 : 200,
      decoration: BoxDecoration(
        color: isDarkTheme ? Colors.grey[850] : Colors.grey,
        borderRadius: BorderRadius.circular(16.0),
      ),
      child: const Center(child: Text('Image Not Available')),
    );
  }

  String _formatDate(DateTime dateTime, String pubDateStr) {
    if (pubDateStr.contains("GMT")) {
      final istDateTime = dateTime.add(const Duration(hours: 5, minutes: 30));
      return DateFormat('hh:mm a, dd MMM yyyy').format(istDateTime);
    }
    return DateFormat('hh:mm a, dd MMM yyyy').format(dateTime);
  }

  void _openArticleInBrowser(String url) async {
    final Uri uri = Uri.parse(url);
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Could not open the article.')),
      );
    }
  }
}
